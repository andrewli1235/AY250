#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass powerdot
\begin_preamble
\usepackage{listings}
\pdsetup{%
  lf=AY250,
  logohook=t,
  palette=green,
  trans=Fade,
}

\pddefinetemplate[titleslide]{titleslide}
{
  lfpos={},
  rfpos={}
}
{
  \pdsetup{
    logopos={}
  }
}

\usepackage{color}
\definecolor{keywords}{RGB}{255,0,90}  
\definecolor{comments}{RGB}{60,60,60}
\definecolor{strings}{RGB}{60,150,90}
\lstset{language=Python,%
            basicstyle=\ttfamily\small,%
            keywordstyle=\color{keywords},%  
            commentstyle=\color{comments}\emph\ttfamily,%
            stringstyle=\color{strings},%
            showstringspaces=false,%  
            emph={Out}, emphstyle=\color{red},
}
\end_preamble
\options style=fyma,display=slides,mode=present,paper=screen
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize size=10
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset VSpace -0.8in
\end_inset

Extract from:
\begin_inset Newline newline
\end_inset

The NumPy Array---A Structure for
\begin_inset Newline newline
\end_inset

Efficient Numerical Computation
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\size normal

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Author
StÃ©fan van der Walt
\begin_inset Newline newline
\end_inset

UC Berkeley
\end_layout

\begin_layout Date
October 2012
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
To print comments as well, set display=slidesnotes in the package settings.
\end_layout

\begin_layout Plain Layout
Valid paper sizes include screen and a4paper.
\end_layout

\begin_layout Plain Layout
The manual for powerdot is at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.ctan.org/tex-archive/macros/latex/contrib/powerdot/doc/powerdot.pdf
\end_layout

\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\color red
IMPORTANT NOTE TO SELF: This file must be compiled using dvipdfm or ps2pdf,
 
\series bold
not
\series default
 the default LyX PDF button (pdflatex).
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset Argument
status open

\begin_layout Plain Layout
method=direct,toc=
\end_layout

\end_inset

Structured arrays
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename gfx/spreadsheet.png
	width 100text%

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset Argument
status open

\begin_layout Plain Layout
method=direct,toc=Reading/writing data
\end_layout

\end_inset

Reading data from file
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.1in
\end_inset


\end_layout

\begin_layout Standard
Reading this kind of data can be somewhat troublesome:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=matlab]
\end_layout

\begin_layout Plain Layout

while ((count > 0) && (n <= NumPoints))
\end_layout

\begin_layout Plain Layout

  % get time - I8 [ms]
\end_layout

\begin_layout Plain Layout

  [lw, count] = fread(fid, 1, 'uint32');
\end_layout

\begin_layout Plain Layout

  if (count > 0) % then carry on
\end_layout

\begin_layout Plain Layout

    uw = fread(fid, 1, 'int32');
\end_layout

\begin_layout Plain Layout

    t(1,n) = (lw+uw*2^32)/1000;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % get number of bytes of data
\end_layout

\begin_layout Plain Layout

    numbytes = fread(fid, 1, 'uint32');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    % read sMEASUREMENTPOSITIONINFO (11 bytes)
\end_layout

\begin_layout Plain Layout

    m(1,n) = fread(fid, 1, 'float32'); % az [rad]
\end_layout

\begin_layout Plain Layout

    m(2,n) = fread(fid, 1, 'float32'); % el [rad]
\end_layout

\begin_layout Plain Layout

    m(3,n) = fread(fid, 1, 'uint8');   % region type
\end_layout

\begin_layout Plain Layout

    m(4,n) = fread(fid, 1, 'uint16');  % region ID
\end_layout

\begin_layout Plain Layout

    g(1,n) = fread(fid, 1, 'uint8');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    numsamples = (numbytes-12)/2; % 2 byte integers
\end_layout

\begin_layout Plain Layout

    a(:,n) = fread(fid, numsamples, 'int16');
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset Argument
status open

\begin_layout Plain Layout
method=file,toc=
\end_layout

\end_inset

Reading data from file
\end_layout

\begin_layout Standard
The NumPy solution:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

dt = np.dtype([('time', np.uint64),
\end_layout

\begin_layout Plain Layout

               ('size', np.uint32),
\end_layout

\begin_layout Plain Layout

               ('position', [('az', np.float32),
\end_layout

\begin_layout Plain Layout

                             ('el', np.float32),
\end_layout

\begin_layout Plain Layout

                             ('region_type', np.uint8),
\end_layout

\begin_layout Plain Layout

                             ('region_ID', np.uint16)]),
\end_layout

\begin_layout Plain Layout

               ('gain', np.uint8),
\end_layout

\begin_layout Plain Layout

               ('samples', (np.int16, 2048))])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data = np.fromfile(f, dtype=dt)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can then access this structured array as before:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

data['position']['az']
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset Argument
status open

\begin_layout Plain Layout
method=file,toc=
\end_layout

\end_inset

Example
\end_layout

\begin_layout Standard
We want to describe the pressure, temperature and velocity of a fluid in
 a 2-dimensional simulation or sampling of experimental data.
 You could create separate arrays for each variable, but one alternative
 is to store all the data into a single structured array:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

dt = np.dtype([
\end_layout

\begin_layout Plain Layout

                ('p', float),
\end_layout

\begin_layout Plain Layout

                ('T', float),
\end_layout

\begin_layout Plain Layout

                ('v', (float, 2))
\end_layout

\begin_layout Plain Layout

              ])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x = np.array([
\end_layout

\begin_layout Plain Layout

               (100, 20, (0, 0.5)),
\end_layout

\begin_layout Plain Layout

               (200, 10, (5, 5.4))
\end_layout

\begin_layout Plain Layout

             ], dtype=dt)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x['p']
\end_layout

\begin_layout Plain Layout

x.shape
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x[x['p'] < 150]
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout EndSlide

\end_layout

\end_body
\end_document
